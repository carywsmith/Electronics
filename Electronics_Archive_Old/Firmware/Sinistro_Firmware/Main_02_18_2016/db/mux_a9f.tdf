--lpm_mux CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone III" IGNORE_CASCADE_BUFFERS="OFF" LPM_PIPELINE=1 LPM_SIZE=2 LPM_WIDTH=8 LPM_WIDTHS=1 clken clock data result sel
--VERSION_BEGIN 9.1 cbx_lpm_mux 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = reg 8 
SUBDESIGN mux_a9f
( 
	clken	:	input;
	clock	:	input;
	data[15..0]	:	input;
	result[7..0]	:	output;
	sel[0..0]	:	input;
) 
VARIABLE 
	external_latency_ffsa[7..0] : dffe;
	result_node[7..0]	: WIRE;
	sel_node[0..0]	: WIRE;
	w_data20w[1..0]	: WIRE;
	w_data32w[1..0]	: WIRE;
	w_data44w[1..0]	: WIRE;
	w_data56w[1..0]	: WIRE;
	w_data68w[1..0]	: WIRE;
	w_data6w[1..0]	: WIRE;
	w_data80w[1..0]	: WIRE;
	w_data92w[1..0]	: WIRE;

BEGIN 
	external_latency_ffsa[].clk = clock;
	external_latency_ffsa[].d = ( result_node[]);
	external_latency_ffsa[].ena = clken;
	result[7..0] = external_latency_ffsa[7..0].q;
	result_node[] = ( ((sel_node[] & w_data92w[1..1]) # ((! sel_node[]) & w_data92w[0..0])), ((sel_node[] & w_data80w[1..1]) # ((! sel_node[]) & w_data80w[0..0])), ((sel_node[] & w_data68w[1..1]) # ((! sel_node[]) & w_data68w[0..0])), ((sel_node[] & w_data56w[1..1]) # ((! sel_node[]) & w_data56w[0..0])), ((sel_node[] & w_data44w[1..1]) # ((! sel_node[]) & w_data44w[0..0])), ((sel_node[] & w_data32w[1..1]) # ((! sel_node[]) & w_data32w[0..0])), ((sel_node[] & w_data20w[1..1]) # ((! sel_node[]) & w_data20w[0..0])), ((sel_node[] & w_data6w[1..1]) # ((! sel_node[]) & w_data6w[0..0])));
	sel_node[] = ( sel[0..0]);
	w_data20w[] = ( data[9..9], data[1..1]);
	w_data32w[] = ( data[10..10], data[2..2]);
	w_data44w[] = ( data[11..11], data[3..3]);
	w_data56w[] = ( data[12..12], data[4..4]);
	w_data68w[] = ( data[13..13], data[5..5]);
	w_data6w[] = ( data[8..8], data[0..0]);
	w_data80w[] = ( data[14..14], data[6..6]);
	w_data92w[] = ( data[15..15], data[7..7]);
END;
--VALID FILE
