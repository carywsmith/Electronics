--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone III" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=13 aset clock cnt_en q sset CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 8.0SP1 cbx_cycloneii 2008:06:02:292401 cbx_lpm_add_sub 2008:06:02:292401 cbx_lpm_compare 2008:06:02:292401 cbx_lpm_counter 2008:06:02:292401 cbx_lpm_decode 2008:06:02:292401 cbx_mgl 2008:06:02:292401 cbx_stratix 2008:06:02:292401 cbx_stratixii 2008:06:02:292401  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneiii_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 13 reg 13 
SUBDESIGN cntr_kbj
( 
	aset	:	input;
	clock	:	input;
	cnt_en	:	input;
	q[12..0]	:	output;
	sset	:	input;
) 
VARIABLE 
	counter_comb_bita0 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita1 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita2 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita3 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita4 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita5 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita6 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita7 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita8 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita9 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita10 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita11 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita12 : cycloneiii_lcell_comb
		WITH (
			LUT_MASK = "5A60",
			SUM_LUTC_INPUT = "cin"
		);
	counter_reg_bit[12..0] : dffeas;
	a_val[12..0]	: WIRE;
	aclr_actual	: WIRE;
	clk_en	: NODE;
	data[12..0]	: NODE;
	external_cin	: WIRE;
	pre_hazard[12..0]	: WIRE;
	s_val[12..0]	: WIRE;
	safe_q[12..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	updown_dir	: WIRE;

BEGIN 
	counter_comb_bita[12..0].cin = ( counter_comb_bita[11..0].cout, external_cin);
	counter_comb_bita[12..0].dataa = ( counter_reg_bit[12..0].q);
	counter_comb_bita[12..0].datab = ( updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir);
	counter_comb_bita[12..0].datad = ( B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1");
	counter_reg_bit[].asdata = (a_val[] $ ((! sclr) & ((sset & s_val[]) # ((! sset) & data[]))));
	counter_reg_bit[].clk = clock;
	counter_reg_bit[].clrn = (! aclr_actual);
	counter_reg_bit[].d = ( counter_comb_bita[12..0].combout);
	counter_reg_bit[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit[].sload = ((sclr # sset) # sload);
	a_val[] = B"1111111111111";
	aclr_actual = aset;
	clk_en = VCC;
	data[] = GND;
	external_cin = B"1";
	pre_hazard[] = counter_reg_bit[].q;
	q[] = safe_q[];
	s_val[] = B"1111111111111";
	safe_q[] = (pre_hazard[] $ a_val[]);
	sclr = GND;
	sload = GND;
	updown_dir = B"1";
END;
--VALID FILE
