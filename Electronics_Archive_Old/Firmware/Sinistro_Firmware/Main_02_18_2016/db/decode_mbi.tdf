--lpm_decode CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone III" IGNORE_CASCADE_BUFFERS="OFF" LPM_DECODES=16 LPM_PIPELINE=1 LPM_WIDTH=4 aclr clock data enable eq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 16 reg 5 
SUBDESIGN decode_mbi
( 
	aclr	:	input;
	clock	:	input;
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	dffe1a[2..0] : dffe;
	dffe2 : dffe;
	dffe3 : dffe;
	aclr_wire	: WIRE;
	clock_wire	: WIRE;
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode102w[1..0]	: WIRE;
	w_anode109w[3..0]	: WIRE;
	w_anode120w[3..0]	: WIRE;
	w_anode130w[3..0]	: WIRE;
	w_anode13w[3..0]	: WIRE;
	w_anode140w[3..0]	: WIRE;
	w_anode150w[3..0]	: WIRE;
	w_anode160w[3..0]	: WIRE;
	w_anode170w[3..0]	: WIRE;
	w_anode180w[3..0]	: WIRE;
	w_anode30w[3..0]	: WIRE;
	w_anode40w[3..0]	: WIRE;
	w_anode4w[1..0]	: WIRE;
	w_anode50w[3..0]	: WIRE;
	w_anode60w[3..0]	: WIRE;
	w_anode70w[3..0]	: WIRE;
	w_anode80w[3..0]	: WIRE;
	w_anode90w[3..0]	: WIRE;
	w_data1w[2..0]	: WIRE;

BEGIN 
	dffe1a[].clk = clock_wire;
	dffe1a[].clrn = (! aclr_wire);
	dffe1a[].d = data_wire[2..0];
	dffe2.clk = clock_wire;
	dffe2.clrn = (! aclr_wire);
	dffe2.d = w_anode4w[1..1];
	dffe3.clk = clock_wire;
	dffe3.clrn = (! aclr_wire);
	dffe3.d = w_anode102w[1..1];
	aclr_wire = aclr;
	clock_wire = clock;
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode180w[3..3], w_anode170w[3..3], w_anode160w[3..3], w_anode150w[3..3], w_anode140w[3..3], w_anode130w[3..3], w_anode120w[3..3], w_anode109w[3..3]), ( w_anode90w[3..3], w_anode80w[3..3], w_anode70w[3..3], w_anode60w[3..3], w_anode50w[3..3], w_anode40w[3..3], w_anode30w[3..3], w_anode13w[3..3]));
	w_anode102w[] = ( (w_anode102w[0..0] & data_wire[3..3]), enable_wire);
	w_anode109w[] = ( (w_anode109w[2..2] & (! w_data1w[2..2])), (w_anode109w[1..1] & (! w_data1w[1..1])), (w_anode109w[0..0] & (! w_data1w[0..0])), dffe3.q);
	w_anode120w[] = ( (w_anode120w[2..2] & (! w_data1w[2..2])), (w_anode120w[1..1] & (! w_data1w[1..1])), (w_anode120w[0..0] & w_data1w[0..0]), dffe3.q);
	w_anode130w[] = ( (w_anode130w[2..2] & (! w_data1w[2..2])), (w_anode130w[1..1] & w_data1w[1..1]), (w_anode130w[0..0] & (! w_data1w[0..0])), dffe3.q);
	w_anode13w[] = ( (w_anode13w[2..2] & (! w_data1w[2..2])), (w_anode13w[1..1] & (! w_data1w[1..1])), (w_anode13w[0..0] & (! w_data1w[0..0])), dffe2.q);
	w_anode140w[] = ( (w_anode140w[2..2] & (! w_data1w[2..2])), (w_anode140w[1..1] & w_data1w[1..1]), (w_anode140w[0..0] & w_data1w[0..0]), dffe3.q);
	w_anode150w[] = ( (w_anode150w[2..2] & w_data1w[2..2]), (w_anode150w[1..1] & (! w_data1w[1..1])), (w_anode150w[0..0] & (! w_data1w[0..0])), dffe3.q);
	w_anode160w[] = ( (w_anode160w[2..2] & w_data1w[2..2]), (w_anode160w[1..1] & (! w_data1w[1..1])), (w_anode160w[0..0] & w_data1w[0..0]), dffe3.q);
	w_anode170w[] = ( (w_anode170w[2..2] & w_data1w[2..2]), (w_anode170w[1..1] & w_data1w[1..1]), (w_anode170w[0..0] & (! w_data1w[0..0])), dffe3.q);
	w_anode180w[] = ( (w_anode180w[2..2] & w_data1w[2..2]), (w_anode180w[1..1] & w_data1w[1..1]), (w_anode180w[0..0] & w_data1w[0..0]), dffe3.q);
	w_anode30w[] = ( (w_anode30w[2..2] & (! w_data1w[2..2])), (w_anode30w[1..1] & (! w_data1w[1..1])), (w_anode30w[0..0] & w_data1w[0..0]), dffe2.q);
	w_anode40w[] = ( (w_anode40w[2..2] & (! w_data1w[2..2])), (w_anode40w[1..1] & w_data1w[1..1]), (w_anode40w[0..0] & (! w_data1w[0..0])), dffe2.q);
	w_anode4w[] = ( (w_anode4w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode50w[] = ( (w_anode50w[2..2] & (! w_data1w[2..2])), (w_anode50w[1..1] & w_data1w[1..1]), (w_anode50w[0..0] & w_data1w[0..0]), dffe2.q);
	w_anode60w[] = ( (w_anode60w[2..2] & w_data1w[2..2]), (w_anode60w[1..1] & (! w_data1w[1..1])), (w_anode60w[0..0] & (! w_data1w[0..0])), dffe2.q);
	w_anode70w[] = ( (w_anode70w[2..2] & w_data1w[2..2]), (w_anode70w[1..1] & (! w_data1w[1..1])), (w_anode70w[0..0] & w_data1w[0..0]), dffe2.q);
	w_anode80w[] = ( (w_anode80w[2..2] & w_data1w[2..2]), (w_anode80w[1..1] & w_data1w[1..1]), (w_anode80w[0..0] & (! w_data1w[0..0])), dffe2.q);
	w_anode90w[] = ( (w_anode90w[2..2] & w_data1w[2..2]), (w_anode90w[1..1] & w_data1w[1..1]), (w_anode90w[0..0] & w_data1w[0..0]), dffe2.q);
	w_data1w[] = dffe1a[].q;
END;
--VALID FILE
